# R2Devops.io pipeline generation - this aims to be included in your pipeline
#
# Inputs:
#   - List of technologies detected in the project : codeowners, cue, cue sheet, dockerfile, git attributes, go, go module, ignore list, json with comments, makefile, markdown, npm, python, shell, text, trivy_dependency, yaml, yarn,

name: R2Devops
on:
  push:
    branches: [ main, r2devops-autopipeline]
  pull_request:
    branches: [ main ]

jobs:
# A style guide linter widely used
  python-flake8:
    name: flake8
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
      - run: python -m pip install flake8
      - name: flake8
        uses: liskin/gh-problem-matcher-wrap@v1
        with:
          linters: flake8
          run: flake8

# A python formatter to help you write homogeneous code
  python-black:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: black
        uses: psf/black@stable
  go-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2

      - name: Build
        run: go build -v ./...

      - name: Test
        run: go test -v ./...
  npm-workflow:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    - run: npm ci
    - run: npm test --if present
    - run: npm teste2e --if present
    - run: npm coverage --if present
    - run: npm lint --if-present
    - run: npm build --if-present
  yarn-workflow:
    runs-on: ubuntu-latest # For now jobs aren't triggered, so I do It manually
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'yarn'
    - run: yarn install --frozen-lockfile --check-cache --immutable --immutable-cache --check-cache
    - run: if [ $(cat package.json | jq .scripts.test) != null ]; then yarn run test; fi
    - run: if [ $(cat package.json | jq .scripts.tests) != null ]; then yarn run tests; fi
    - run: if [ $(cat package.json | jq .scripts.teste2e) != null ]; then yarn run teste2e; fi
    - run: if [ $(cat package.json | jq .scripts.lint) != null ]; then yarn run lint; fi
    - run: if [ $(cat package.json | jq .scripts.build) != null ]; then yarn run build; fi
    - run: if [ $(cat package.json | jq .scripts.coverage) != null ]; then yarn run coverage; fi
  trivy_scan:
    name: Trivy Scan docker image
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build image
        uses: docker/build-push-action@v3
        with:
          push: false
          tags: ${{ github.repository }}:${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.repository }}:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

          # Could use GitHub code scanning in addition, but need a public repository or a license
          # https://github.com/marketplace/actions/aqua-security-trivy#using-trivy-with-github-code-scanning

  gitleaks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: gitleaks-action
      uses: zricethezav/gitleaks-action@master


# R2DEVOPS - PROJECT CUSTOMIZATIONS
# You can update them in your settings :)

